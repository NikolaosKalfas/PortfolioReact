### Type definitions saved at 2024-03-18T08:13:26.326Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @derivedTypes @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  graphqlTypegen: SiteGraphqlTypegen
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
}

type SiteGraphqlTypegen {
  typesOutputPath: String
  generateOnBuild: Boolean
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """Crop a part of the original image to match the specified size."""
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller
  than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """Scale the image regardless of the original aspect ratio."""
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile @derivedTypes @dontInfer {
  contentful_id: String!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1,
    2] for fluid. In this case, an image with a fluid layout and width = 400
    would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int
    quality: Int = 50
  ): GatsbyImageData!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String
  filename: String
  width: Int
  height: Int
  size: Int
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulHomepageHeader implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  greeting: String
  headerCopy: ContentfulHomepageHeaderHeaderCopy
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  button: ContentfulButton @link(by: "id", from: "button___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulHomepageHeaderSys
}

type ContentfulHomepageHeaderHeaderCopy {
  raw: String
}

type ContentfulButton implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  buttonLabel: String
  buttonLink: String
  secondary: Boolean
  homepage_header: [ContentfulHomepageHeader] @link(by: "id", from: "homepage header___NODE") @proxy(from: "homepage header___NODE")
  product_card: [ContentfulProductCard] @link(by: "id", from: "product card___NODE") @proxy(from: "product card___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulButtonSys
}

type ContentfulProductCard implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  cardImage: ContentfulAsset @link(by: "id", from: "cardImage___NODE")
  included: [ContentfulProductCardPoint] @link(by: "id", from: "included___NODE")
  mainButton: ContentfulButton @link(by: "id", from: "mainButton___NODE")
  secondaryButton: ContentfulButton @link(by: "id", from: "secondaryButton___NODE")
  products_slider: [ContentfulProductsSlider] @link(by: "id", from: "products slider___NODE") @proxy(from: "products slider___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProductCardSys
}

type ContentfulProductCardPoint implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  product_card: [ContentfulProductCard] @link(by: "id", from: "product card___NODE") @proxy(from: "product card___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProductCardPointSys
}

type ContentfulProductCardPointSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProductCardPointSysContentType
}

type ContentfulProductCardPointSysContentType @derivedTypes {
  sys: ContentfulProductCardPointSysContentTypeSys
}

type ContentfulProductCardPointSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProductsSlider implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  sliderProductCard: [ContentfulProductCard] @link(by: "id", from: "sliderProductCard___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProductsSliderSys
}

type ContentfulPage implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  secondaryHeader: ContentfulSecondaryHeader @link(by: "id", from: "secondaryHeader___NODE")
  projectsGrid: ContentfulProjects @link(by: "id", from: "projectsGrid___NODE")
  iconsRow: ContentfulIconsRow @link(by: "id", from: "iconsRow___NODE")
  title: String
  slug: String
  seo: ContentfulSeoComponent @link(by: "id", from: "seo___NODE")
  freeConsultancyForm: ContentfulConsultancyForm @link(by: "id", from: "freeConsultancyForm___NODE")
  productCardsSlider: ContentfulProductsSlider @link(by: "id", from: "productCardsSlider___NODE")
  contactForm: ContentfulContactForm @link(by: "id", from: "contactForm___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageSys
  skills: ContentfulImageLeftWithText @link(by: "id", from: "skills___NODE")
  titleAndText: ContentfulTitleAndText @link(by: "id", from: "titleAndText___NODE")
  plainTextContainer: ContentfulPlainText @link(by: "id", from: "plainTextContainer___NODE")
  header: ContentfulHomepageHeader @link(by: "id", from: "header___NODE")
  testimonialsCarousel: ContentfulTestimonialsSlider @link(by: "id", from: "testimonialsCarousel___NODE")
}

type ContentfulSecondaryHeader implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  heading: String
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulSecondaryHeaderSys
}

type ContentfulSecondaryHeaderSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulSecondaryHeaderSysContentType
}

type ContentfulSecondaryHeaderSysContentType @derivedTypes {
  sys: ContentfulSecondaryHeaderSysContentTypeSys
}

type ContentfulSecondaryHeaderSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProjects implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  projects: [ContentfulProjectItem] @link(by: "id", from: "projects___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProjectsSys
}

type ContentfulProjectItem implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  link: String
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  projects: [ContentfulProjects] @link(by: "id", from: "projects___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProjectItemSys
}

type ContentfulProjectItemSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProjectItemSysContentType
}

type ContentfulProjectItemSysContentType @derivedTypes {
  sys: ContentfulProjectItemSysContentTypeSys
}

type ContentfulProjectItemSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProjectsSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProjectsSysContentType
}

type ContentfulProjectsSysContentType @derivedTypes {
  sys: ContentfulProjectsSysContentTypeSys
}

type ContentfulProjectsSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulIconsRow implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  icons: [ContentfulIconItem] @link(by: "id", from: "icons___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulIconsRowSys
}

type ContentfulIconItem implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  icon: ContentfulAsset @link(by: "id", from: "icon___NODE")
  icons_row: [ContentfulIconsRow] @link(by: "id", from: "icons row___NODE") @proxy(from: "icons row___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulIconItemSys
  title_and_text: [ContentfulTitleAndText] @link(by: "id", from: "title and text___NODE") @proxy(from: "title and text___NODE")
}

type ContentfulIconItemSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulIconItemSysContentType
}

type ContentfulIconItemSysContentType @derivedTypes {
  sys: ContentfulIconItemSysContentTypeSys
}

type ContentfulIconItemSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulTitleAndText implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  text: ContentfulTitleAndTextText
  icons: [ContentfulIconItem] @link(by: "id", from: "icons___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulTitleAndTextSys
}

type ContentfulTitleAndTextText {
  raw: String
}

type ContentfulTitleAndTextSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulTitleAndTextSysContentType
}

type ContentfulTitleAndTextSysContentType @derivedTypes {
  sys: ContentfulTitleAndTextSysContentTypeSys
}

type ContentfulTitleAndTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulIconsRowSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulIconsRowSysContentType
}

type ContentfulIconsRowSysContentType @derivedTypes {
  sys: ContentfulIconsRowSysContentTypeSys
}

type ContentfulIconsRowSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulSeoComponent implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  description: String
  noIndex: Boolean
  noFollow: Boolean
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulSeoComponentSys
}

type ContentfulSeoComponentSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulSeoComponentSysContentType
}

type ContentfulSeoComponentSysContentType @derivedTypes {
  sys: ContentfulSeoComponentSysContentTypeSys
}

type ContentfulSeoComponentSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulConsultancyForm implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulConsultancyFormSys
}

type ContentfulConsultancyFormSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulConsultancyFormSysContentType
}

type ContentfulConsultancyFormSysContentType @derivedTypes {
  sys: ContentfulConsultancyFormSysContentTypeSys
}

type ContentfulConsultancyFormSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulContactForm implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  name: Boolean
  email: Boolean
  phone: Boolean
  message: Boolean
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulContactFormSys
}

type ContentfulContactFormSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulContactFormSysContentType
}

type ContentfulContactFormSysContentType @derivedTypes {
  sys: ContentfulContactFormSysContentTypeSys
}

type ContentfulContactFormSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulPageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPageSysContentType
}

type ContentfulPageSysContentType @derivedTypes {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulImageLeftWithText implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  text: ContentfulImageLeftWithTextText
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulImageLeftWithTextSys
}

type ContentfulImageLeftWithTextText {
  raw: String
}

type ContentfulImageLeftWithTextSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulImageLeftWithTextSysContentType
}

type ContentfulImageLeftWithTextSysContentType @derivedTypes {
  sys: ContentfulImageLeftWithTextSysContentTypeSys
}

type ContentfulImageLeftWithTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulPlainText implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  content: ContentfulPlainTextContent
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPlainTextSys
}

type ContentfulPlainTextContent {
  raw: String
}

type ContentfulPlainTextSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPlainTextSysContentType
}

type ContentfulPlainTextSysContentType @derivedTypes {
  sys: ContentfulPlainTextSysContentTypeSys
}

type ContentfulPlainTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulTestimonialsSlider implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  testimonialCard: [ContentfulTestimonial] @link(by: "id", from: "testimonialCard___NODE")
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulTestimonialsSliderSys
}

type ContentfulTestimonial implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  message: ContentfulTestimonialMessage
  name: String
  business: String
  testimonials_slider: [ContentfulTestimonialsSlider] @link(by: "id", from: "testimonials slider___NODE") @proxy(from: "testimonials slider___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulTestimonialSys
}

type ContentfulTestimonialMessage {
  raw: String
}

type ContentfulTestimonialSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulTestimonialSysContentType
}

type ContentfulTestimonialSysContentType @derivedTypes {
  sys: ContentfulTestimonialSysContentTypeSys
}

type ContentfulTestimonialSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulTestimonialsSliderSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulTestimonialsSliderSysContentType
}

type ContentfulTestimonialsSliderSysContentType @derivedTypes {
  sys: ContentfulTestimonialsSliderSysContentTypeSys
}

type ContentfulTestimonialsSliderSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProductsSliderSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProductsSliderSysContentType
}

type ContentfulProductsSliderSysContentType @derivedTypes {
  sys: ContentfulProductsSliderSysContentTypeSys
}

type ContentfulProductsSliderSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProductCardSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProductCardSysContentType
}

type ContentfulProductCardSysContentType @derivedTypes {
  sys: ContentfulProductCardSysContentTypeSys
}

type ContentfulProductCardSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulButtonSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulButtonSysContentType
}

type ContentfulButtonSysContentType @derivedTypes {
  sys: ContentfulButtonSysContentTypeSys
}

type ContentfulButtonSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulHomepageHeaderSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulHomepageHeaderSysContentType
}

type ContentfulHomepageHeaderSysContentType @derivedTypes {
  sys: ContentfulHomepageHeaderSysContentTypeSys
}

type ContentfulHomepageHeaderSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulNavigationLink implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  label: String
  link: String
  footer: [ContentfulFooter] @link(by: "id", from: "footer___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulNavigationLinkSys
  navbar: [ContentfulNavbar] @link(by: "id", from: "navbar___NODE")
}

type ContentfulFooter implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  footerLink: [ContentfulNavigationLink] @link(by: "id", from: "footerLink___NODE")
  socialLink: [ContentfulSocialIcons] @link(by: "id", from: "socialLink___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulFooterSys
}

type ContentfulSocialIcons implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  link: String
  icon: ContentfulAsset @link(by: "id", from: "icon___NODE")
  footer: [ContentfulFooter] @link(by: "id", from: "footer___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulSocialIconsSys
}

type ContentfulSocialIconsSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulSocialIconsSysContentType
}

type ContentfulSocialIconsSysContentType @derivedTypes {
  sys: ContentfulSocialIconsSysContentTypeSys
}

type ContentfulSocialIconsSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulFooterSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulFooterSysContentType
}

type ContentfulFooterSysContentType @derivedTypes {
  sys: ContentfulFooterSysContentTypeSys
}

type ContentfulFooterSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulNavigationLinkSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulNavigationLinkSysContentType
}

type ContentfulNavigationLinkSysContentType @derivedTypes {
  sys: ContentfulNavigationLinkSysContentTypeSys
}

type ContentfulNavigationLinkSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulNavbar implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  navbarLink: [ContentfulNavigationLink] @link(by: "id", from: "navbarLink___NODE")
  products: [ContentfulNavigationLink] @link(by: "id", from: "products___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulNavbarSys
}

type ContentfulNavbarSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulNavbarSysContentType
}

type ContentfulNavbarSysContentType @derivedTypes {
  sys: ContentfulNavbarSysContentTypeSys
}

type ContentfulNavbarSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}